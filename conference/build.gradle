buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("au.com.dius:pact-jvm-provider-gradle_2.11:3.2.6")
	}
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'au.com.dius.pact'

jar {
	baseName = 'latetuna.conference'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven {
        url "http://nexus:8081/content/groups/public"
    }
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
    compile('se.omegapoint:eventbus-client:1.0-SNAPSHOT')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}

pact {
	serviceProviders {
		// You can define as many as you need, but each must have a unique name
		conference {
			// All the provider properties are optional, and have sensible defaults (shown below)
			protocol = 'http'
			host = 'localhost'
			port = 8080
			path = '/'

			// Again, you can define as many consumers for each provider as you need, but each must have a unique name
			hasPactWith('proposal') {
				// currently supports a file path using file() or a URL using url()
				pactFile = file('src/test/resources/pacts/proposal-conference.json')
			}

			// Or if you have many pact files in a directory
			hasPactsWith('manyConsumers') {
				// Will define a consumer for each pact file in the directory.
				// Consumer name is read from contents of pact file
				pactFileLocation = file('src/test/resources/pacts')
			}
		}
	}
}
