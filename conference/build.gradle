buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("au.com.dius:pact-jvm-provider-gradle_2.11:3.5.0-beta.2")
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.3'
    }
}

apply plugin: 'spring-boot'
apply plugin: 'au.com.dius.pact'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-java-application'

jar {
    baseName = 'latetuna.conference'
    version = '0.0.1-SNAPSHOT'
}
//sourceCompatibility = 1.8
//targetCompatibility = 1.8

mainClassName = 'com.omegapoint.latetuna.conference.ConferenceApplication'

dependencies {
    compile project(':eventbus-client')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile 'au.com.dius:pact-jvm-provider_2.11:3.5.0-beta.2'
    compile 'au.com.dius:pact-jvm-provider-junit_2.11:3.5.0-beta.2'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile 'org.assertj:assertj-core:3.4.1'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}

pact {
    serviceProviders {
        conference {
            verificationType = 'ANNOTATED_METHOD'
            packagesToScan = ['com.omegapoint.latetuna.conference.messages.*']
            hasPactsFromPactBroker("http://$System.env.DOCKER_IP:80")
        }
    }

    reports {
        defaultReports() // adds the standard console output
        markdown // report in markdown format
        json // report in json format
    }
}

docker {
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp", "https")
    } else {
        // Fallback, only works in Linux
        url = 'unix:///var/run/docker.sock'
    }
    if (System.env.DOCKER_CERT_PATH) {
        certPath = new File(System.env.DOCKER_CERT_PATH)
    } else {
        certPath = new File(System.properties['user.home'], '.docker/machine/machines/default')
    }
    javaApplication {
        baseImage = 'java:openjdk-8-jre'
        maintainer = 'LateTuna Team'
        tag = 'latetuna/conference'
    }
}
